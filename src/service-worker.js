/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { StaleWhileRevalidate } from 'workbox-strategies'
import { Queue } from 'workbox-background-sync'

clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    } // Return true to signal that we want to use the handler.

    return true
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
)

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    (url.origin === self.location.origin && url.pathname.endsWith('.png')) ||
    url.pathname.endsWith('.svg'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
)

// Позволяет веб-приложению пропустить работника и переключиться на нового
// с помощью сообщения от клиента: registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})

//
//
// Any other custom service worker logic can go here.
//
//

let isReplayAllRequests = null // является ли запрос повторным (принудительная отправка всех чек-листов)
let numberOfStoredRecords = null // кол-во хранимых записей

// создание очереди
const queue = new Queue('Checklist', {
  maxRetentionTime: 60 * 24 * 100, // days
})

// получаем кол-во хранимых записей
const checkNumberStoredRecords = async () => {
  await queue.getAll().then((data) => {
    console.log('The queue still contains: ', data.length, 'items !')

    numberOfStoredRecords = data.length
  })

  storedRecordsBroadcast.postMessage({ numberOfStoredRecords }) // передаем кол-во хранимых записей клиенту
}

/* обработка каждого запроса */

self.addEventListener('fetch', (event) => {
  // Add in your own criteria here to return early if this
  // isn't a request that should use background sync.
  if (event.request.method !== 'POST') {
    return
  }

  // логика выполнения фоновой синхронизации
  const bgSyncLogic = async () => {
    try {
      const response = await fetch(event.request.clone()) // повторим запрос отправки для каждого элемента очереди фоновой синхронизации

      return response
    } catch (error) {
      if (isReplayAllRequests === false) {
        //   если запрос НЕ является повторной принудительной отправкой
        await queue.pushRequest({ request: event.request }) // добавим запрос в очередь
      }

      return error
    } finally {
      await checkNumberStoredRecords() // отправляем кол-во хранимых записей и передаем клиенту
    }
  }

  event.respondWith(bgSyncLogic())
})

/* связь с клиентом */

const requestsBroadcast = new BroadcastChannel('requests-channel') // канал для связи service wroker'a с клиентом
const storedRecordsBroadcast = new BroadcastChannel('stored-records-channel') // канал для связи service wroker'a с клиентом

// канал связи для вызова принудительной синхронизации и передачи информации клиенту

requestsBroadcast.onmessage = (event) => {
  let isReplayFetching = null

  /* если обычная отправка формы - укажем, что запрос не является повторной принудительной отправкой */
  if (event.data && event.data.type === 'REQUEST') {
    isReplayAllRequests = false
    isReplayFetching = false
    /* если принудительная отправка всех неотправленных ранее чек-листов */
  } else if (event.data && event.data.type === 'FORCE_REPLAY_REQUEST') {
    isReplayAllRequests = true
    isReplayFetching = true

    // принудительно повторить отправку чек-листов, сохраненных в sync DB
    const replayRequest = async () => {
      let isReplaySuccess = null // успешно ли выполнен запрос (null | boolean)

      await queue
        .replayRequests() //
        .then(() => {
          isReplaySuccess = true // запрос выполнен успешно
        })
        .catch((error) => {
          console.error('Error queue force replay: ', error)

          isReplaySuccess = false // запрос выполнен неудачно
        })
        .finally(async () => {
          isReplayFetching = false

          await checkNumberStoredRecords() // отправляем кол-во хранимых записей и передаем клиенту

          requestsBroadcast.postMessage({
            showModalReplay: true,
            isReplaySuccess,
            isReplayFetching,
          }) // передаем данные клиенту
        })
    }
    replayRequest()
  }
}

// канал связи для отправки клиенту(по запросу) количества хранимых записей

storedRecordsBroadcast.onmessage = async (event) => {
  // отобразить количество записей, хранимых в хранилище синхронизации
  if (event.data && event.data.type === 'CHECK_NUMBER_STORED_RECORDS') {
    await checkNumberStoredRecords() // получаем кол-во хранимых записей и передаем клиенту
  }
}
